class Solution {
    public int divide(int dividend, int divisor) {
        if (dividend == Integer.MIN_VALUE) {
        if (divisor == -1) { // overflow
            return Integer.MAX_VALUE;
        } else if (divisor > 0) {
            return -1 + divide(dividend + divisor, divisor);
        } else {
            return 1 + divide(dividend - divisor, divisor);
        }
    }
    if (divisor == 1) return dividend;
    if (divisor == -1) return -dividend;
    if (divisor == Integer.MIN_VALUE) return 0;
    int res = recurse(Math.abs(dividend), Math.abs(divisor));
    if(dividend < 0 ^ divisor < 0) return -res;
    return res;
}

public int recurse(int x, int y) {
    if (x < y) return 0;
    if (x == y) return 1;
    int count = 1;
    int d = y;
	// find the largest power of 2 * y that is less than x
    while (d+d > 0 && x > d + d) {
        d += d;
        count += count;
    }
    return count + recurse(x - d, y);
    }
}
//this problem is stupid
