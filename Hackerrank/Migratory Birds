import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the migratoryBirds function below.
    static int migratoryBirds(List<Integer> arr) {
        HashMap<Integer, Integer> bird = new HashMap<>();
        //iterate through the list and add new values to the hashmap
        for (int i = 0; i < arr.size(); i++){
            int key = arr.get(i);
            if (bird.containsKey(key)){
                int freq = bird.get(key);
                freq++;
                bird.put(key, freq);
            }
            else {
                bird.put(key, 1);
            }
        }
        int max_number = 0;
        int key = 0;
        for (Map.Entry<Integer, Integer> val : bird.entrySet()){
            if (val.getValue() > max_number) {
                key = val.getKey();
                max_number = val.getValue();
            }
        }
        return key;
    }

    

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arrCount = Integer.parseInt(bufferedReader.readLine().trim());

        String[] arrItems = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        List<Integer> arr = new ArrayList<>();

        for (int i = 0; i < arrCount; i++) {
            int arrItem = Integer.parseInt(arrItems[i]);
            arr.add(arrItem);
        }

        int result = migratoryBirds(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
